import com.mgd.core.gradle.S3Upload
import java.security.MessageDigest
import java.time.Instant
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter
import java.util.*

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)

    id("com.mgd.core.gradle.s3") version "1.4.4"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
    implementation(kotlin("stdlib"))
    implementation(kotlin("stdlib"))
    implementation(kotlin("reflect", version = "1.9.21"))
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.3.2")

    //feign + okhttp
    val feignVersion = "10.1.0"
    implementation("io.github.openfeign:feign-core:$feignVersion")
    implementation("io.github.openfeign:feign-jackson:$feignVersion")
    implementation("io.github.openfeign:feign-okhttp:$feignVersion")
    implementation("io.github.openfeign:feign-slf4j:$feignVersion")

    //feign uses an older version of jackson so force a newer one
    val jacksonVersion = "2.9.8"
    implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
    implementation("com.fasterxml.jackson.module:jackson-modules-java8:$jacksonVersion")

    implementation("org.slf4j:slf4j-api:1.7.2")
    implementation("ch.qos.logback:logback-classic:1.0.9")
    implementation("ch.qos.logback:logback-core:1.0.9")

    implementation("com.amazonaws:aws-lambda-java-core:1.2.0")
    implementation("com.amazonaws:aws-lambda-java-events:2.2.5")
    implementation("com.amazonaws:aws-java-sdk-ssm:1.+")

    implementation("com.github.kittinunf.fuel:fuel:2.3.1")
    implementation("com.github.kittinunf.fuel:fuel-jackson:2.3.1")
    implementation("org.apache.commons:commons-lang3:3.0")

    testImplementation(kotlin("test"))
    testImplementation("org.mockito.kotlin:mockito-kotlin:5.2.1")

    val junitVersion = "2.9.8"
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:$junitVersion")//testRuntime
}

tasks.test {
    useJUnitPlatform()
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Junit test framework
            useJUnit()
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

val mainClassName = "com.equalexperts.slack.MainKt"
application {
    // Define the main class for the application.
    mainClass.set(mainClassName)
}

s3 {
    region = "eu-west-1"
}

tasks {
    val jarFileName = "INSERT_LAMBDA_NAME-lambda.jar"

    val fatJar = register<Jar>("fatJar") {
        dependsOn.addAll(listOf("compileJava", "compileKotlin", "processResources")) // We need this for Gradle optimization to work
        archiveFileName.set(jarFileName)
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        manifest { attributes(mapOf("Main-Class" to application.mainClass)) } // Provided we set it up in the application plugin configuration
        val sourcesMain = sourceSets.main.get()
        val contents = configurations.runtimeClasspath.get()
            .map { if (it.isDirectory) it else zipTree(it) } +
            sourcesMain.output
        from(contents)
    }

    val buildHashFile = register<Task>("buildHashFile") {
        dependsOn(fatJar)

        val result = file("build/$jarFileName.base64sha256")
        outputs.file(result)
        doLast {
            val sha256hash = MessageDigest.getInstance("SHA-256").let { sha256 ->
                val fatJarFile = fatJar.get().archiveFile.get().asFile
                println("fatJar exists? ${fatJarFile.exists()}")
                val jarFileBytes = file(fatJarFile).readBytes()
                val hash = sha256.digest(jarFileBytes)
                val base64Hash = Base64.getEncoder().encodeToString(hash)
                base64Hash
            }
            result.writeText(sha256hash)
        }
    }

    build {
        dependsOn(fatJar) // Trigger fat jar creation during build
    }

    val uploadLambdaHash = register<S3Upload>("uploadLambdaHash"){
        dependsOn(buildHashFile, test)
        bucket = "INSERT_BUCKET_ARTEFACT_NAME"
        key = "$jarFileName.base64sha256"

        file = "${project.projectDir}/build/$jarFileName.base64sha256"
        overwrite = true
    }

    val uploadLambda = register<S3Upload>("uploadLambda"){
        dependsOn(fatJar, test)
        bucket = "INSERT_BUCKET_ARTEFACT_NAME"
        key = jarFileName
        file =  fatJar.get().archiveFile.get().asFile.path
        overwrite = true
    }

    register<Task>("upload"){
        dependsOn(
            uploadLambdaHash,
            uploadLambda
        )
    }
}

//TODO: Removed profile checker because of dependencies, it should go back
