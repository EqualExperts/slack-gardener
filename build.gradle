import jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask

import com.amazonaws.services.s3.model.ObjectMetadata

buildscript {
    ext {
        kotlinVersion = '1.3.+'
        feignVersion = '10.1.0'
        jacksonVersion = '2.9.8'
        jUnitVersion = '5.2.0'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.+"
    }

}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'jp.classmethod.aws'
apply plugin: "jp.classmethod.aws.s3"

group = 'com.equalexperts'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

    //feign + okhttp
    compile "io.github.openfeign:feign-core:${feignVersion}"
    compile "io.github.openfeign:feign-jackson:${feignVersion}"
    compile "io.github.openfeign:feign-okhttp:${feignVersion}"
    compile "io.github.openfeign:feign-slf4j:${feignVersion}"

    //feign uses an older version of jackson so force a newer one
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}"
    compile "com.fasterxml.jackson.module:jackson-modules-java8:${jacksonVersion}"

    compile "org.slf4j:slf4j-api:1.7.2"
    compile "ch.qos.logback:logback-classic:1.0.9"
    compile "ch.qos.logback:logback-core:1.0.9"

    compile "com.amazonaws:aws-lambda-java-core:1.2.0"
    compile "com.amazonaws:aws-lambda-java-events:2.2.5"
    compile "com.amazonaws:aws-java-sdk-ssm:1.+"


    testCompile "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    testCompile "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${jUnitVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
}

ext.getGitHash = {
    def p1 = 'git rev-parse HEAD'.execute()
    p1.waitFor()
    return p1.text
}

jar {
    manifest {
        attributes(
                "Implementation-Revision": getGitHash(),
                'Main-Class': 'com.equalexperts.slack.gardener.AwsLambda'
        )
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

aws {
    profileName = 'default'
    region = 'eu-west-1'
}

task base64sha256(type: Exec, dependsOn: build) {
    commandLine "./scripts/generate_lambda_file_hash.sh"
    
    standardOutput = new ByteArrayOutputStream()
    ext.hash = {
        standardOutput.toString('UTF-8')
    }
}

task buildHashFile(dependsOn: base64sha256) {
    def result = file("build/ee-slack-gardener-lambda.base64sha256")
    outputs.file result
    doLast {
        def hash = tasks.base64sha256.hash()
        println hash
        result.write(hash, 'UTF-8')
    }
}

task uploadLambdaHash(type: AmazonS3FileUploadTask, dependsOn: buildHashFile){
    file file("build/ee-slack-gardener-lambda.base64sha256")
    bucketName 'ee-slack-gardener-lambdas'
    key "ee-slack-gardener-lambda.jar.base64sha256"

    def m = new ObjectMetadata()
    m.setContentType("text/plain")
    objectMetadata = m
}

task uploadLambda(type: AmazonS3FileUploadTask, dependsOn: build) {
    file file("build/libs/ee-slack-gardener-0.0.1-SNAPSHOT.jar")
    bucketName 'ee-slack-gardener-lambdas'
    key "ee-slack-gardener-lambda.jar"
}

task upload(){
    dependsOn uploadLambda
    dependsOn uploadLambdaHash
}